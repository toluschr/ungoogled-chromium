--- a/chrome/browser/about_flags.cc
+++ b/chrome/browser/about_flags.cc
@@ -305,6 +305,19 @@ const FeatureEntry::Choice kBookmarkBarN
      "never"},
 };
 
+const FeatureEntry::Choice kOmniboxAutocompleteFiltering[] = {
+    {flags_ui::kGenericExperimentChoiceDefault, "", ""},
+    {"None",
+     "omnibox-autocomplete-filtering",
+     "none"},
+    {"Search suggestions only",
+     "omnibox-autocomplete-filtering",
+     "search-suggestions-only"},
+    {"Search suggestions and bookmarks",
+     "omnibox-autocomplete-filtering",
+     "search-suggestions-and-bookmarks"},
+};
+
 const FeatureEntry::Choice kTouchEventFeatureDetectionChoices[] = {
     {flags_ui::kGenericExperimentChoiceDisabled, "", ""},
     {flags_ui::kGenericExperimentChoiceEnabled,
@@ -2024,6 +2037,10 @@ const FeatureEntry kFeatureEntries[] = {
      "Force punycode hostnames",
      "Force punycode in hostnames instead of Unicode when displaying Internationalized Domain Names (IDNs).",
      kOsAll, SINGLE_VALUE_TYPE("force-punycode-hostnames")},
+    {"omnibox-autocomplete-filtering",
+     "Omnibox Autocomplete Filtering",
+     "Restrict omnibox autocomplete results to search suggestions (if enabled) or search suggestions and bookmarks.",
+     kOsAll, MULTI_VALUE_TYPE(kOmniboxAutocompleteFiltering)},
     {"pdf-plugin-name",
      "Set internal PDF plugin name",
      "Sets the internal PDF viewer plugin name. Useful for sites that probe JS API navigator.plugins",
--- a/components/omnibox/browser/autocomplete_controller.cc
+++ b/components/omnibox/browser/autocomplete_controller.cc
@@ -15,6 +15,7 @@
 
 #include "base/bind.h"
 #include "base/check_op.h"
+#include "base/command_line.h"
 #include "base/feature_list.h"
 #include "base/format_macros.h"
 #include "base/metrics/histogram.h"
@@ -226,11 +227,37 @@ AutocompleteController::AutocompleteCont
       first_query_(true),
       search_service_worker_signal_sent_(false),
       template_url_service_(provider_client_->GetTemplateURLService()) {
+  const std::string flag_value =
+    base::CommandLine::ForCurrentProcess()->GetSwitchValueASCII("omnibox-autocomplete-filtering");
+  if (flag_value == "none") {
+    base::trace_event::MemoryDumpManager::GetInstance()->RegisterDumpProvider(
+      this, "AutocompleteController", base::ThreadTaskRunnerHandle::Get());
+    return;
+  }
+
   provider_types &= ~OmniboxFieldTrial::GetDisabledProviderTypes();
-  if (provider_types & AutocompleteProvider::TYPE_BOOKMARK)
+  if (provider_types & AutocompleteProvider::TYPE_BOOKMARK && flag_value != "search-suggestions-only")
     providers_.push_back(new BookmarkProvider(provider_client_.get()));
   if (provider_types & AutocompleteProvider::TYPE_BUILTIN)
     providers_.push_back(new BuiltinProvider(provider_client_.get()));
+  if (flag_value == "search-suggestions-only" || flag_value == "search-suggestions-and-bookmarks") {
+    if (provider_types & AutocompleteProvider::TYPE_KEYWORD) {
+      keyword_provider_ = new KeywordProvider(provider_client_.get(), this);
+      providers_.push_back(keyword_provider_);
+    }
+    if (provider_types & AutocompleteProvider::TYPE_SEARCH) {
+      search_provider_ = new SearchProvider(provider_client_.get(), this);
+      providers_.push_back(search_provider_);
+    }
+    if (provider_types & AutocompleteProvider::TYPE_HISTORY_URL) {
+      history_url_provider_ = new HistoryURLProvider(provider_client_.get(), this);
+      if (provider_types & AutocompleteProvider::TYPE_HISTORY_URL)
+        providers_.push_back(history_url_provider_);
+    }
+    base::trace_event::MemoryDumpManager::GetInstance()->RegisterDumpProvider(
+        this, "AutocompleteController", base::ThreadTaskRunnerHandle::Get());
+    return;
+  }
   if (provider_types & AutocompleteProvider::TYPE_HISTORY_QUICK)
     providers_.push_back(new HistoryQuickProvider(provider_client_.get()));
   if (provider_types & AutocompleteProvider::TYPE_KEYWORD) {
--- a/components/omnibox/browser/history_url_provider.cc
+++ b/components/omnibox/browser/history_url_provider.cc
@@ -548,6 +548,11 @@ void HistoryURLProvider::Start(const Aut
   if (fixed_up_input.type() != metrics::OmniboxInputType::QUERY)
     matches_.push_back(what_you_typed_match);
 
+  const std::string flag_value =
+    base::CommandLine::ForCurrentProcess()->GetSwitchValueASCII("omnibox-autocomplete-filtering");
+  if (flag_value == "search-suggestions-only" || flag_value == "search-suggestions-and-bookmarks")
+    return;
+
   // We'll need the history service to run both passes, so try to obtain it.
   history::HistoryService* const history_service =
       client()->GetHistoryService();
--- a/components/omnibox/browser/search_provider.cc
+++ b/components/omnibox/browser/search_provider.cc
@@ -12,6 +12,7 @@
 #include "base/base64.h"
 #include "base/bind.h"
 #include "base/callback.h"
+#include "base/command_line.h"
 #include "base/feature_list.h"
 #include "base/i18n/break_iterator.h"
 #include "base/i18n/case_conversion.h"
@@ -645,6 +646,11 @@ void SearchProvider::Run(bool query_is_p
 }
 
 void SearchProvider::DoHistoryQuery(bool minimal_changes) {
+  const std::string flag_value =
+    base::CommandLine::ForCurrentProcess()->GetSwitchValueASCII("omnibox-autocomplete-filtering");
+  if (flag_value == "search-suggestions-only" || flag_value == "search-suggestions-and-bookmarks")
+    return;
+
   // The history query results are synchronous, so if minimal_changes is true,
   // we still have the last results and don't need to do anything.
   if (minimal_changes)
